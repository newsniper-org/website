---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime, maybe } from "@lib/utils";
import BackToPrevious from "@components/BackToPrevious.astro";
import PostNavigation from "@components/PostNavigation.astro";
import TableOfContents from "@components/TableOfContents.astro";
import Talkyard from "@components/Talkyard.astro";
import Tag from "@components/Tag.astro";
import { getEntry } from "astro:content";

export async function getStaticPaths() {
  const posts = (await getCollection("article"))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}
type Props = CollectionEntry<"article">;

const posts = await getCollection("article");

function getNextPost() {
  let postIndex;
  for (const post of posts) {
    if (post.slug === Astro.params.slug) {
      postIndex = posts.indexOf(post);
      return posts[postIndex + 1];
    }
  }
}

function getPrevPost() {
  let postIndex;
  for (const post of posts) {
    if (post.slug === Astro.params.slug) {
      postIndex = posts.indexOf(post);
      return posts[postIndex - 1];
    }
  }
}

const nextPost = getNextPost();
const prevPost = getPrevPost();

const post = Astro.props;

const series = await maybe(async (ser) => await getEntry("series", ser), post.data.series)
const { Content, headings } = await post.render();
---

<Layout title={post.data.title} description={post.data.description}>
  <Container>
    <div class="animate">
      <BackToPrevious href="/blog">Back to blog</BackToPrevious>
    </div>
    <div class="my-10 space-y-1">
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={post.data.date} />
        </div>
        &bull;
        <div class="font-base text-sm">
          {readingTime(post.body)}
        </div>
      </div>
      <h1 class="animate text-3xl font-semibold text-black dark:text-white">
        {post.data.title}
      </h1>
      {
      post.data.categories.length > 0 && <div style="display: flex">
        <p>{post.data.categories.length > 1 ? "Categories" : "Category"}</p>
        {post.data.categories.map((category) => <Tag type="category" tag={category} />)}
      </div>
      }
      {post.data.keywords.length > 0 && <div style="display: flex">
        <p>{post.data.keywords.length > 1 ? "Keywords" : "Keyword"}</p>
        {post.data.keywords.map((keyword) => <Tag type="keyword" tag={keyword} />)}
      </div>
      }
      {/* series && */}
    </div>
    <TableOfContents headings={headings} />
    <article class="animate">
      <Content />
      <div class="mt-24">
        <PostNavigation prevPost={prevPost} nextPost={nextPost} />
      </div>
      <div class="mt-24">
        <Talkyard discussionId={`article/${post.slug}`}/>
      </div>
    </article>
  </Container>
</Layout>
